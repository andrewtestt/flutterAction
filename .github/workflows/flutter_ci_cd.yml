name: Flutter CI + CD

# This workflow is triggered on pushes to the repository.
on:
 push:
    branches:
      - new

env:
  FLUTTER_CHANNEL: 'stable' # 'stable', 'beta', or 'master', default to: 'stable'
  FLUTTER_VERSION: '3.3.10'
  XCODE_VERSION: '14.2'
  PATH_TO_AAB: 'build/app/outputs/bundle/release/app-release.aab'
  ANDROID_PACKAGE_NAME: 'com.kevych.untitled1'
  PATH_TO_IPA: 'build/ios/ipa/untitled1.ipa'

jobs:
  code-analysis-and-testing:
    name: Code analysis and testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        # flutter-version: ${{ env.FLUTTER_VERSION }} # you can also specify exact version of flutter

    - name: Get pub dependencies
      run: flutter pub get

    - name: Flutter analyze
      run: flutter analyze

    - name: Flutter test
      run: flutter test


  android:
    name: Android CI/CD
    needs: code-analysis-and-testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Prepare key.jks & key.properties files
      env:
        KEYSTORE_FILE_BASE64: ${{ secrets.KEYSTORE_FILE_BASE64 }}
        KEY_PROPERTIES_FILE: ${{ secrets.KEY_PROPERTIES_FILE }}
      run: |
        echo "Convert key base64 string to a file"
        echo "$KEYSTORE_FILE_BASE64" >> key.jks.base64
        base64 --decode key.jks.base64 > key.jks
        echo "Convert key.properties secret string to a file"
        echo "$KEY_PROPERTIES_FILE" >> key.properties
      working-directory: 'android/'
     
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        # flutter-version: ${{ env.FLUTTER_VERSION }} # you can also specify exact version of flutter
    
    - name: Flutter doctor
      run: flutter doctor # this is an optional step and can be removed
    
    - name: Build AAB
      run: |
        flutter build appbundle --release

        echo "Removing signing files for extra security"
        rm android/key.*
    
    - name: Upload AAB artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-aab
        path: ${{ env.PATH_TO_AAB }}

    - name: Upload to Play Store
      run: |
        fastlane supply --aab ${{ env.PATH_TO_AAB }} --json_key_data '${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}' --package_name '${{ env.ANDROID_PACKAGE_NAME }}' --track 'internal'


  release:
    name: iOS CI/CD
#     needs: code-analysis-and-testing
    runs-on: macos-latest
    timeout-minutes: 30
    steps:  

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        clean: 'true'
        fetch-depth: 0
      
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
#      with:
#        useConfigFile: true
#        configFilePath: ./.github/gitversion.yml


    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
    - name: 'Get Previous tag'
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
      with:
        fallback: 1.0.0 # Optional fallback tag to use when no tag can be found

    - name: Split version code
      uses: xom9ikk/split@v1
      id: split
      with:
        string: "${{  steps.previoustag.outputs.tag }}"
        separator: +
        limit: -1

    - name: GitHub Tag Name example
      id: test
      run: |
        echo "Tag name from GITHUB_REF_NAME: $GITHUB_HEAD_REF"
        echo "Tag name from github.ref_name: ${{  steps.previoustag.outputs.tag }}"
        echo "Tag name from github.ref_name: ${{  steps.split.outputs._0 }}"
        echo "GIT_TAG=`echo ${{steps.split.outputs._1 + 1}}`" >> $GITHUB_ENV
        
    
    
   





    - uses: actions/checkout@v2
    - id: read-version
      uses: NiklasLehnfeld/flutter-version-number-action@main
      with:
        file-path: ./pubspec.yaml
    - uses: nick-invision/assert-action@v1
    - name: Prepare for release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.FS_GITHUB_TOKEN }}
#       if: steps.read-version.outputs.version-number == steps.gitversion.outputs.MajorMinorPatch
      with:
          tag_name: ${{ steps.read-version.outputs.version-number }}+${{ steps.read-version.outputs.version-number == steps.split.outputs._0 && steps.test.outputs.GIT_TAG || 1 }}
          release_name: Release ${{ steps.gitversion.outputs.BuildMetaData }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
          
    
    - name: Set up Xcode ${{ env.XCODE_VERSION }}
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}

    - name: Prepare code signing
      env:
        FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
        FS_P12_FILE: ${{ secrets.FS_P12_FILE }}
        FS_P12_PASS: ${{ secrets.FS_P12_PASS }}
        FS_PROV_FILE: ${{ secrets.FS_PROV_FILE }}
      run: |
        echo "Convert base64 strings to files"
        echo "$FS_PROV_FILE" >> prov.temp.txt
        echo "$FS_P12_FILE ">> cert.temp.txt
        base64 --decode prov.temp.txt > prov.temp.mobileprovision
        base64 --decode cert.temp.txt > cert.temp.p12
        echo "Copy provisioning file to the correct locations"
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp prov.temp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/prov.mobileprovision
        echo "Create a new keychain & import p12 certificate"
        security create-keychain -p "$FS_KEYCHAIN_PASS" build.keychain
        security import cert.temp.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$FS_P12_PASS" -A
        echo "Set new keychain as a default"
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        echo "Clean up temp files"
        rm *.temp.*
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        # flutter-version: ${{ env.FLUTTER_VERSION }} # you can also specify exact version of flutter
    
    - name: Flutter doctor
      run: flutter doctor # this is an optional step and can be removed

    - name: Build IPA
      env:
        FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
      run: |
        echo "Unlocking keychain"
        security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        # Important, just in case the build takes longer than the default 300s timeout
        # Otherwise the build will freeze at signing the frameworks if the keychain is locked
        echo "Increasing keychain auto lock timeout"
        security set-keychain-settings -lut 1800 ~/Library/Keychains/build.keychain
        flutter build ipa --release --build-number=${{ steps.gitversion.outputs.BuildMetaData }} --export-options-plist=ios/ExportOptions.plist
        echo "Locking keychain"
        security lock-keychain ~/Library/Keychains/build.keychain
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-ipa
        path: ${{ env.PATH_TO_IPA }}

    - name: Publishing app to TestFlight
      env:
        IOS_API_ISSUER_ID: ${{ secrets.IOS_API_ISSUER_ID }}
        IOS_API_KEY_ID: ${{ secrets.IOS_API_KEY_ID }}
        IOS_API_KEY: ${{ secrets.IOS_API_KEY }}
        PATH_TO_IPA: ${{ env.PATH_TO_IPA }}
      run: |
        echo "Setup private key"
        mkdir -p ~/private_keys/
        echo -n "$IOS_API_KEY" | base64 --decode --output ~/private_keys/AuthKey_$IOS_API_KEY_ID.p8
        
        echo "Upload to TestFlight"
        xcrun altool --upload-app -t ios -f $PATH_TO_IPA --apiKey $IOS_API_KEY_ID --apiIssuer $IOS_API_ISSUER_ID
        echo "Clean up"
        rm -rf ~/private_keys/
